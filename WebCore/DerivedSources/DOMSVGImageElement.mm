/*
 * This file is part of the WebKit open source project.
 * This file has been generated by generate-bindings.pl. DO NOT MODIFY!
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE COMPUTER, INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE COMPUTER, INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 */

#import "config.h"

#if ENABLE(SVG)

#import "DOMInternal.h"

#import "DOMSVGImageElement.h"

#import "CSSMutableStyleDeclaration.h"
#import "CSSStyleDeclaration.h"
#import "CSSValue.h"
#import "DOMBlobInternal.h"
#import "DOMCSSRuleInternal.h"
#import "DOMCSSStyleDeclarationInternal.h"
#import "DOMCSSValueInternal.h"
#import "DOMEventInternal.h"
#import "DOMNodeInternal.h"
#import "DOMSVGAnimatedBooleanInternal.h"
#import "DOMSVGAnimatedLengthInternal.h"
#import "DOMSVGAnimatedPreserveAspectRatioInternal.h"
#import "DOMSVGAnimatedStringInternal.h"
#import "DOMSVGAnimatedTransformListInternal.h"
#import "DOMSVGElementInternal.h"
#import "DOMSVGImageElementInternal.h"
#import "DOMSVGMatrixInternal.h"
#import "DOMSVGRectInternal.h"
#import "DOMSVGStringListInternal.h"
#import "DOMStyleSheetInternal.h"
#import "ExceptionHandlers.h"
#import "JSMainThreadExecState.h"
#import "KURL.h"
#import "SVGAnimatedBoolean.h"
#import "SVGAnimatedLength.h"
#import "SVGAnimatedPreserveAspectRatio.h"
#import "SVGAnimatedString.h"
#import "SVGAnimatedTransformList.h"
#import "SVGElement.h"
#import "SVGImageElement.h"
#import "SVGMatrix.h"
#import "SVGRect.h"
#import "SVGStringList.h"
#import "ThreadCheck.h"
#import "WebScriptObjectPrivate.h"
#import <wtf/GetPtr.h>

#define IMPL static_cast<WebCore::SVGImageElement*>(reinterpret_cast<WebCore::Node*>(_internal))

@implementation DOMSVGImageElement

- (DOMSVGAnimatedLength *)x
{
    WebCore::JSMainThreadNullState state;
    return kit(WTF::getPtr(IMPL->xAnimated()));
}

- (DOMSVGAnimatedLength *)y
{
    WebCore::JSMainThreadNullState state;
    return kit(WTF::getPtr(IMPL->yAnimated()));
}

- (DOMSVGAnimatedLength *)width
{
    WebCore::JSMainThreadNullState state;
    return kit(WTF::getPtr(IMPL->widthAnimated()));
}

- (DOMSVGAnimatedLength *)height
{
    WebCore::JSMainThreadNullState state;
    return kit(WTF::getPtr(IMPL->heightAnimated()));
}

- (DOMSVGAnimatedPreserveAspectRatio *)preserveAspectRatio
{
    WebCore::JSMainThreadNullState state;
    return kit(WTF::getPtr(IMPL->preserveAspectRatioAnimated()));
}

- (DOMSVGAnimatedString *)href
{
    WebCore::JSMainThreadNullState state;
    return kit(WTF::getPtr(IMPL->hrefAnimated()));
}

- (DOMSVGStringList *)requiredFeatures
{
    WebCore::JSMainThreadNullState state;
    return kit(WTF::getPtr(WebCore::SVGStaticListPropertyTearOff<WebCore::SVGStringList>::create(WebCore::GetOwnerElementForType<WebCore::SVGImageElement, WebCore::IsDerivedFromSVGElement<WebCore::SVGImageElement>::value>::ownerElement(IMPL), IMPL->requiredFeatures())));
}

- (DOMSVGStringList *)requiredExtensions
{
    WebCore::JSMainThreadNullState state;
    return kit(WTF::getPtr(WebCore::SVGStaticListPropertyTearOff<WebCore::SVGStringList>::create(WebCore::GetOwnerElementForType<WebCore::SVGImageElement, WebCore::IsDerivedFromSVGElement<WebCore::SVGImageElement>::value>::ownerElement(IMPL), IMPL->requiredExtensions())));
}

- (DOMSVGStringList *)systemLanguage
{
    WebCore::JSMainThreadNullState state;
    return kit(WTF::getPtr(WebCore::SVGStaticListPropertyTearOff<WebCore::SVGStringList>::create(WebCore::GetOwnerElementForType<WebCore::SVGImageElement, WebCore::IsDerivedFromSVGElement<WebCore::SVGImageElement>::value>::ownerElement(IMPL), IMPL->systemLanguage())));
}

- (NSString *)xmllang
{
    WebCore::JSMainThreadNullState state;
    return IMPL->xmllang();
}

- (void)setXmllang:(NSString *)newXmllang
{
    WebCore::JSMainThreadNullState state;
    IMPL->setXmllang(newXmllang);
}

- (NSString *)xmlspace
{
    WebCore::JSMainThreadNullState state;
    return IMPL->xmlspace();
}

- (void)setXmlspace:(NSString *)newXmlspace
{
    WebCore::JSMainThreadNullState state;
    IMPL->setXmlspace(newXmlspace);
}

- (DOMSVGAnimatedBoolean *)externalResourcesRequired
{
    WebCore::JSMainThreadNullState state;
    return kit(WTF::getPtr(IMPL->externalResourcesRequiredAnimated()));
}

- (DOMSVGAnimatedString *)className
{
    WebCore::JSMainThreadNullState state;
    return kit(WTF::getPtr(IMPL->classNameAnimated()));
}

- (DOMCSSStyleDeclaration *)style
{
    WebCore::JSMainThreadNullState state;
    return kit(WTF::getPtr(IMPL->style()));
}

- (DOMSVGAnimatedTransformList *)transform
{
    WebCore::JSMainThreadNullState state;
    return kit(WTF::getPtr(IMPL->transformAnimated()));
}

- (DOMSVGElement *)nearestViewportElement
{
    WebCore::JSMainThreadNullState state;
    return kit(WTF::getPtr(IMPL->nearestViewportElement()));
}

- (DOMSVGElement *)farthestViewportElement
{
    WebCore::JSMainThreadNullState state;
    return kit(WTF::getPtr(IMPL->farthestViewportElement()));
}

- (BOOL)hasExtension:(NSString *)extension
{
    WebCore::JSMainThreadNullState state;
    return IMPL->hasExtension(extension);
}

- (DOMCSSValue *)getPresentationAttribute:(NSString *)name
{
    WebCore::JSMainThreadNullState state;
    return kit(WTF::getPtr(IMPL->getPresentationAttribute(name)));
}

- (DOMSVGRect *)getBBox
{
    WebCore::JSMainThreadNullState state;
    return kit(WTF::getPtr(WebCore::SVGPropertyTearOff<WebCore::FloatRect>::create(IMPL->getBBox())));
}

- (DOMSVGMatrix *)getCTM
{
    WebCore::JSMainThreadNullState state;
    return kit(WTF::getPtr(WebCore::SVGPropertyTearOff<WebCore::SVGMatrix>::create(IMPL->getCTM())));
}

- (DOMSVGMatrix *)getScreenCTM
{
    WebCore::JSMainThreadNullState state;
    return kit(WTF::getPtr(WebCore::SVGPropertyTearOff<WebCore::SVGMatrix>::create(IMPL->getScreenCTM())));
}

- (DOMSVGMatrix *)getTransformToElement:(DOMSVGElement *)element
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    DOMSVGMatrix *result = kit(WTF::getPtr(WebCore::SVGPropertyTearOff<WebCore::SVGMatrix>::create(IMPL->getTransformToElement(core(element), ec))));
    WebCore::raiseOnDOMError(ec);
    return result;
}

@end

WebCore::SVGImageElement* core(DOMSVGImageElement *wrapper)
{
    return wrapper ? reinterpret_cast<WebCore::SVGImageElement*>(wrapper->_internal) : 0;
}

DOMSVGImageElement *kit(WebCore::SVGImageElement* value)
{
    { DOM_ASSERT_MAIN_THREAD(); WebCoreThreadViolationCheckRoundOne(); };
    return static_cast<DOMSVGImageElement*>(kit(static_cast<WebCore::Node*>(value)));
}

#endif // ENABLE(SVG)
