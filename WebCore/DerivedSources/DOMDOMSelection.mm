/*
 * This file is part of the WebKit open source project.
 * This file has been generated by generate-bindings.pl. DO NOT MODIFY!
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE COMPUTER, INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE COMPUTER, INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 */

#import "config.h"
#import "DOMInternal.h"

#import "DOMDOMSelection.h"

#import "DOMBlobInternal.h"
#import "DOMCSSRuleInternal.h"
#import "DOMCSSValueInternal.h"
#import "DOMDOMSelectionInternal.h"
#import "DOMEventInternal.h"
#import "DOMNodeInternal.h"
#import "DOMRangeInternal.h"
#import "DOMSelection.h"
#import "DOMStyleSheetInternal.h"
#import "ExceptionHandlers.h"
#import "JSMainThreadExecState.h"
#import "KURL.h"
#import "Node.h"
#import "Range.h"
#import "ThreadCheck.h"
#import "WebCoreObjCExtras.h"
#import "WebScriptObjectPrivate.h"
#import <wtf/GetPtr.h>

#define IMPL reinterpret_cast<WebCore::DOMSelection*>(_internal)

@implementation DOMDOMSelection

- (void)dealloc
{
    if (WebCoreObjCScheduleDeallocateOnMainThread([DOMDOMSelection class], self))
        return;

    if (_internal)
        IMPL->deref();
    [super dealloc];
}

- (void)finalize
{
    if (_internal)
        IMPL->deref();
    [super finalize];
}

- (DOMNode *)anchorNode
{
    WebCore::JSMainThreadNullState state;
    return kit(WTF::getPtr(IMPL->anchorNode()));
}

- (int)anchorOffset
{
    WebCore::JSMainThreadNullState state;
    return IMPL->anchorOffset();
}

- (DOMNode *)focusNode
{
    WebCore::JSMainThreadNullState state;
    return kit(WTF::getPtr(IMPL->focusNode()));
}

- (int)focusOffset
{
    WebCore::JSMainThreadNullState state;
    return IMPL->focusOffset();
}

- (BOOL)isCollapsed
{
    WebCore::JSMainThreadNullState state;
    return IMPL->isCollapsed();
}

- (int)rangeCount
{
    WebCore::JSMainThreadNullState state;
    return IMPL->rangeCount();
}

- (DOMNode *)baseNode
{
    WebCore::JSMainThreadNullState state;
    return kit(WTF::getPtr(IMPL->baseNode()));
}

- (int)baseOffset
{
    WebCore::JSMainThreadNullState state;
    return IMPL->baseOffset();
}

- (DOMNode *)extentNode
{
    WebCore::JSMainThreadNullState state;
    return kit(WTF::getPtr(IMPL->extentNode()));
}

- (int)extentOffset
{
    WebCore::JSMainThreadNullState state;
    return IMPL->extentOffset();
}

- (NSString *)type
{
    WebCore::JSMainThreadNullState state;
    return IMPL->type();
}

- (void)collapse:(DOMNode *)node index:(int)index
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->collapse(core(node), index, ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)collapseToEnd
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->collapseToEnd(ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)collapseToStart
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->collapseToStart(ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)deleteFromDocument
{
    WebCore::JSMainThreadNullState state;
    IMPL->deleteFromDocument();
}

- (BOOL)containsNode:(DOMNode *)node allowPartial:(BOOL)allowPartial
{
    WebCore::JSMainThreadNullState state;
    return IMPL->containsNode(core(node), allowPartial);
}

- (void)selectAllChildren:(DOMNode *)node
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->selectAllChildren(core(node), ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)extend:(DOMNode *)node offset:(int)offset
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->extend(core(node), offset, ec);
    WebCore::raiseOnDOMError(ec);
}

- (DOMRange *)getRangeAt:(int)index
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    DOMRange *result = kit(WTF::getPtr(IMPL->getRangeAt(index, ec)));
    WebCore::raiseOnDOMError(ec);
    return result;
}

- (void)removeAllRanges
{
    WebCore::JSMainThreadNullState state;
    IMPL->removeAllRanges();
}

- (void)addRange:(DOMRange *)range
{
    WebCore::JSMainThreadNullState state;
    IMPL->addRange(core(range));
}

- (void)modify:(NSString *)alter direction:(NSString *)direction granularity:(NSString *)granularity
{
    WebCore::JSMainThreadNullState state;
    IMPL->modify(alter, direction, granularity);
}

- (void)setBaseAndExtent:(DOMNode *)inBaseNode baseOffset:(int)inBaseOffset extentNode:(DOMNode *)inExtentNode extentOffset:(int)inExtentOffset
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->setBaseAndExtent(core(inBaseNode), inBaseOffset, core(inExtentNode), inExtentOffset, ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)setPosition:(DOMNode *)node offset:(int)offset
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->setPosition(core(node), offset, ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)empty
{
    WebCore::JSMainThreadNullState state;
    IMPL->empty();
}

@end

WebCore::DOMSelection* core(DOMDOMSelection *wrapper)
{
    return wrapper ? reinterpret_cast<WebCore::DOMSelection*>(wrapper->_internal) : 0;
}

DOMDOMSelection *kit(WebCore::DOMSelection* value)
{
    { DOM_ASSERT_MAIN_THREAD(); WebCoreThreadViolationCheckRoundOne(); };
    if (!value)
        return nil;
    if (DOMDOMSelection *wrapper = getDOMWrapper(value))
        return [[wrapper retain] autorelease];
    DOMDOMSelection *wrapper = [[DOMDOMSelection alloc] _init];
    wrapper->_internal = reinterpret_cast<DOMObjectInternal*>(value);
    value->ref();
    addDOMWrapper(wrapper, value);
    return [wrapper autorelease];
}
