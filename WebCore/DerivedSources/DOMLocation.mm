/*
 * This file is part of the WebKit open source project.
 * This file has been generated by generate-bindings.pl. DO NOT MODIFY!
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE COMPUTER, INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE COMPUTER, INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 */

#import "config.h"
#import "DOMInternal.h"

#import "DOMLocation.h"

#import "DOMBlobInternal.h"
#import "DOMCSSRuleInternal.h"
#import "DOMCSSValueInternal.h"
#import "DOMEventInternal.h"
#import "DOMLocationInternal.h"
#import "DOMNodeInternal.h"
#import "DOMStyleSheetInternal.h"
#import "ExceptionHandlers.h"
#import "JSMainThreadExecState.h"
#import "KURL.h"
#import "Location.h"
#import "ThreadCheck.h"
#import "WebCoreObjCExtras.h"
#import "WebScriptObjectPrivate.h"
#import <wtf/GetPtr.h>

#define IMPL reinterpret_cast<WebCore::Location*>(_internal)

@implementation DOMLocation

- (void)dealloc
{
    if (WebCoreObjCScheduleDeallocateOnMainThread([DOMLocation class], self))
        return;

    if (_internal)
        IMPL->deref();
    [super dealloc];
}

- (void)finalize
{
    if (_internal)
        IMPL->deref();
    [super finalize];
}

- (NSString *)href
{
    WebCore::JSMainThreadNullState state;
    return IMPL->href();
}

- (void)setHref:(NSString *)newHref
{
    WebCore::JSMainThreadNullState state;
    IMPL->setHref(newHref);
}

- (NSString *)protocol
{
    WebCore::JSMainThreadNullState state;
    return IMPL->protocol();
}

- (void)setProtocol:(NSString *)newProtocol
{
    WebCore::JSMainThreadNullState state;
    IMPL->setProtocol(newProtocol);
}

- (NSString *)host
{
    WebCore::JSMainThreadNullState state;
    return IMPL->host();
}

- (void)setHost:(NSString *)newHost
{
    WebCore::JSMainThreadNullState state;
    IMPL->setHost(newHost);
}

- (NSString *)hostname
{
    WebCore::JSMainThreadNullState state;
    return IMPL->hostname();
}

- (void)setHostname:(NSString *)newHostname
{
    WebCore::JSMainThreadNullState state;
    IMPL->setHostname(newHostname);
}

- (NSString *)port
{
    WebCore::JSMainThreadNullState state;
    return IMPL->port();
}

- (void)setPort:(NSString *)newPort
{
    WebCore::JSMainThreadNullState state;
    IMPL->setPort(newPort);
}

- (NSString *)pathname
{
    WebCore::JSMainThreadNullState state;
    return IMPL->pathname();
}

- (void)setPathname:(NSString *)newPathname
{
    WebCore::JSMainThreadNullState state;
    IMPL->setPathname(newPathname);
}

- (NSString *)search
{
    WebCore::JSMainThreadNullState state;
    return IMPL->search();
}

- (void)setSearch:(NSString *)newSearch
{
    WebCore::JSMainThreadNullState state;
    IMPL->setSearch(newSearch);
}

- (NSString *)hashName
{
    WebCore::JSMainThreadNullState state;
    return IMPL->hash();
}

- (void)setHashName:(NSString *)newHashName
{
    WebCore::JSMainThreadNullState state;
    IMPL->setHash(newHashName);
}

- (NSString *)origin
{
    WebCore::JSMainThreadNullState state;
    return IMPL->origin();
}

- (void)assign:(NSString *)url
{
    WebCore::JSMainThreadNullState state;
    IMPL->assign(url);
}

- (void)replace:(NSString *)url
{
    WebCore::JSMainThreadNullState state;
    IMPL->replace(url);
}

- (void)reload
{
    WebCore::JSMainThreadNullState state;
    IMPL->reload();
}

- (NSString *)getParameter:(NSString *)name
{
    WebCore::JSMainThreadNullState state;
    return IMPL->getParameter(name);
}

@end

WebCore::Location* core(DOMLocation *wrapper)
{
    return wrapper ? reinterpret_cast<WebCore::Location*>(wrapper->_internal) : 0;
}

DOMLocation *kit(WebCore::Location* value)
{
    { DOM_ASSERT_MAIN_THREAD(); WebCoreThreadViolationCheckRoundOne(); };
    if (!value)
        return nil;
    if (DOMLocation *wrapper = getDOMWrapper(value))
        return [[wrapper retain] autorelease];
    DOMLocation *wrapper = [[DOMLocation alloc] _init];
    wrapper->_internal = reinterpret_cast<DOMObjectInternal*>(value);
    value->ref();
    addDOMWrapper(wrapper, value);
    return [wrapper autorelease];
}
