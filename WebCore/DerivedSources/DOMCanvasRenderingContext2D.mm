/*
 * This file is part of the WebKit open source project.
 * This file has been generated by generate-bindings.pl. DO NOT MODIFY!
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE COMPUTER, INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE COMPUTER, INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 */

#import "config.h"
#import "DOMInternal.h"

#import "DOMCanvasRenderingContext2D.h"

#import "CanvasGradient.h"
#import "CanvasRenderingContext2D.h"
#import "DOMBlobInternal.h"
#import "DOMCSSRuleInternal.h"
#import "DOMCSSValueInternal.h"
#import "DOMCanvasGradientInternal.h"
#import "DOMCanvasRenderingContext2DInternal.h"
#import "DOMEventInternal.h"
#import "DOMImageDataInternal.h"
#import "DOMNodeInternal.h"
#import "DOMStyleSheetInternal.h"
#import "DOMTextMetricsInternal.h"
#import "DOMcustomInternal.h"
#import "ExceptionHandlers.h"
#import "ImageData.h"
#import "JSMainThreadExecState.h"
#import "KURL.h"
#import "TextMetrics.h"
#import "ThreadCheck.h"
#import "WebScriptObjectPrivate.h"
#import "custom.h"
#import <wtf/GetPtr.h>

#define IMPL static_cast<WebCore::CanvasRenderingContext2D*>(reinterpret_cast<WebCore::Node*>(_internal))

@implementation DOMCanvasRenderingContext2D

- (float)globalAlpha
{
    WebCore::JSMainThreadNullState state;
    return IMPL->globalAlpha();
}

- (void)setGlobalAlpha:(float)newGlobalAlpha
{
    WebCore::JSMainThreadNullState state;
    IMPL->setGlobalAlpha(newGlobalAlpha);
}

- (NSString *)globalCompositeOperation
{
    WebCore::JSMainThreadNullState state;
    return IMPL->globalCompositeOperation();
}

- (void)setGlobalCompositeOperation:(NSString *)newGlobalCompositeOperation
{
    WebCore::JSMainThreadNullState state;
    IMPL->setGlobalCompositeOperation(newGlobalCompositeOperation);
}

- (float)lineWidth
{
    WebCore::JSMainThreadNullState state;
    return IMPL->lineWidth();
}

- (void)setLineWidth:(float)newLineWidth
{
    WebCore::JSMainThreadNullState state;
    IMPL->setLineWidth(newLineWidth);
}

- (NSString *)lineCap
{
    WebCore::JSMainThreadNullState state;
    return IMPL->lineCap();
}

- (void)setLineCap:(NSString *)newLineCap
{
    WebCore::JSMainThreadNullState state;
    IMPL->setLineCap(newLineCap);
}

- (NSString *)lineJoin
{
    WebCore::JSMainThreadNullState state;
    return IMPL->lineJoin();
}

- (void)setLineJoin:(NSString *)newLineJoin
{
    WebCore::JSMainThreadNullState state;
    IMPL->setLineJoin(newLineJoin);
}

- (float)miterLimit
{
    WebCore::JSMainThreadNullState state;
    return IMPL->miterLimit();
}

- (void)setMiterLimit:(float)newMiterLimit
{
    WebCore::JSMainThreadNullState state;
    IMPL->setMiterLimit(newMiterLimit);
}

- (float)shadowOffsetX
{
    WebCore::JSMainThreadNullState state;
    return IMPL->shadowOffsetX();
}

- (void)setShadowOffsetX:(float)newShadowOffsetX
{
    WebCore::JSMainThreadNullState state;
    IMPL->setShadowOffsetX(newShadowOffsetX);
}

- (float)shadowOffsetY
{
    WebCore::JSMainThreadNullState state;
    return IMPL->shadowOffsetY();
}

- (void)setShadowOffsetY:(float)newShadowOffsetY
{
    WebCore::JSMainThreadNullState state;
    IMPL->setShadowOffsetY(newShadowOffsetY);
}

- (float)shadowBlur
{
    WebCore::JSMainThreadNullState state;
    return IMPL->shadowBlur();
}

- (void)setShadowBlur:(float)newShadowBlur
{
    WebCore::JSMainThreadNullState state;
    IMPL->setShadowBlur(newShadowBlur);
}

- (NSString *)shadowColor
{
    WebCore::JSMainThreadNullState state;
    return IMPL->shadowColor();
}

- (void)setShadowColor:(NSString *)newShadowColor
{
    WebCore::JSMainThreadNullState state;
    IMPL->setShadowColor(newShadowColor);
}

- (NSString *)font
{
    WebCore::JSMainThreadNullState state;
    return IMPL->font();
}

- (void)setFont:(NSString *)newFont
{
    WebCore::JSMainThreadNullState state;
    IMPL->setFont(newFont);
}

- (NSString *)textAlign
{
    WebCore::JSMainThreadNullState state;
    return IMPL->textAlign();
}

- (void)setTextAlign:(NSString *)newTextAlign
{
    WebCore::JSMainThreadNullState state;
    IMPL->setTextAlign(newTextAlign);
}

- (NSString *)textBaseline
{
    WebCore::JSMainThreadNullState state;
    return IMPL->textBaseline();
}

- (void)setTextBaseline:(NSString *)newTextBaseline
{
    WebCore::JSMainThreadNullState state;
    IMPL->setTextBaseline(newTextBaseline);
}

- (DOMcustom *)strokeStyle
{
    WebCore::JSMainThreadNullState state;
    return kit(WTF::getPtr(IMPL->strokeStyle()));
}

- (void)setStrokeStyle:(DOMcustom *)newStrokeStyle
{
    WebCore::JSMainThreadNullState state;
    ASSERT(newStrokeStyle);

    IMPL->setStrokeStyle(core(newStrokeStyle));
}

- (DOMcustom *)fillStyle
{
    WebCore::JSMainThreadNullState state;
    return kit(WTF::getPtr(IMPL->fillStyle()));
}

- (void)setFillStyle:(DOMcustom *)newFillStyle
{
    WebCore::JSMainThreadNullState state;
    ASSERT(newFillStyle);

    IMPL->setFillStyle(core(newFillStyle));
}

- (void)save
{
    WebCore::JSMainThreadNullState state;
    IMPL->save();
}

- (void)restore
{
    WebCore::JSMainThreadNullState state;
    IMPL->restore();
}

- (void)scale:(float)sx sy:(float)sy
{
    WebCore::JSMainThreadNullState state;
    IMPL->scale(sx, sy);
}

- (void)rotate:(float)angle
{
    WebCore::JSMainThreadNullState state;
    IMPL->rotate(angle);
}

- (void)translate:(float)tx ty:(float)ty
{
    WebCore::JSMainThreadNullState state;
    IMPL->translate(tx, ty);
}

- (void)transform:(float)m11 m12:(float)m12 m21:(float)m21 m22:(float)m22 dx:(float)dx dy:(float)dy
{
    WebCore::JSMainThreadNullState state;
    IMPL->transform(m11, m12, m21, m22, dx, dy);
}

- (void)setTransform:(float)m11 m12:(float)m12 m21:(float)m21 m22:(float)m22 dx:(float)dx dy:(float)dy
{
    WebCore::JSMainThreadNullState state;
    IMPL->setTransform(m11, m12, m21, m22, dx, dy);
}

- (DOMCanvasGradient *)createLinearGradient:(float)x0 y0:(float)y0 x1:(float)x1 y1:(float)y1
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    DOMCanvasGradient *result = kit(WTF::getPtr(IMPL->createLinearGradient(x0, y0, x1, y1, ec)));
    WebCore::raiseOnDOMError(ec);
    return result;
}

- (DOMCanvasGradient *)createRadialGradient:(float)x0 y0:(float)y0 r0:(float)r0 x1:(float)x1 y1:(float)y1 r1:(float)r1
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    DOMCanvasGradient *result = kit(WTF::getPtr(IMPL->createRadialGradient(x0, y0, r0, x1, y1, r1, ec)));
    WebCore::raiseOnDOMError(ec);
    return result;
}

- (void)clearRect:(float)x y:(float)y width:(float)width height:(float)height
{
    WebCore::JSMainThreadNullState state;
    IMPL->clearRect(x, y, width, height);
}

- (void)fillRect:(float)x y:(float)y width:(float)width height:(float)height
{
    WebCore::JSMainThreadNullState state;
    IMPL->fillRect(x, y, width, height);
}

- (void)beginPath
{
    WebCore::JSMainThreadNullState state;
    IMPL->beginPath();
}

- (void)closePath
{
    WebCore::JSMainThreadNullState state;
    IMPL->closePath();
}

- (void)moveTo:(float)x y:(float)y
{
    WebCore::JSMainThreadNullState state;
    IMPL->moveTo(x, y);
}

- (void)lineTo:(float)x y:(float)y
{
    WebCore::JSMainThreadNullState state;
    IMPL->lineTo(x, y);
}

- (void)quadraticCurveTo:(float)cpx cpy:(float)cpy x:(float)x y:(float)y
{
    WebCore::JSMainThreadNullState state;
    IMPL->quadraticCurveTo(cpx, cpy, x, y);
}

- (void)bezierCurveTo:(float)cp1x cp1y:(float)cp1y cp2x:(float)cp2x cp2y:(float)cp2y x:(float)x y:(float)y
{
    WebCore::JSMainThreadNullState state;
    IMPL->bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
}

- (void)arcTo:(float)x1 y1:(float)y1 x2:(float)x2 y2:(float)y2 radius:(float)radius
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->arcTo(x1, y1, x2, y2, radius, ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)rect:(float)x y:(float)y width:(float)width height:(float)height
{
    WebCore::JSMainThreadNullState state;
    IMPL->rect(x, y, width, height);
}

- (void)arc:(float)x y:(float)y radius:(float)radius startAngle:(float)startAngle endAngle:(float)endAngle anticlockwise:(BOOL)anticlockwise
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->arc(x, y, radius, startAngle, endAngle, anticlockwise, ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)fill
{
    WebCore::JSMainThreadNullState state;
    IMPL->fill();
}

- (void)stroke
{
    WebCore::JSMainThreadNullState state;
    IMPL->stroke();
}

- (void)clip
{
    WebCore::JSMainThreadNullState state;
    IMPL->clip();
}

- (BOOL)isPointInPath:(float)x y:(float)y
{
    WebCore::JSMainThreadNullState state;
    return IMPL->isPointInPath(x, y);
}

- (DOMTextMetrics *)measureText:(NSString *)text
{
    WebCore::JSMainThreadNullState state;
    return kit(WTF::getPtr(IMPL->measureText(text)));
}

- (void)setAlpha:(float)alpha
{
    WebCore::JSMainThreadNullState state;
    IMPL->setAlpha(alpha);
}

- (void)setCompositeOperation:(NSString *)compositeOperation
{
    WebCore::JSMainThreadNullState state;
    IMPL->setCompositeOperation(compositeOperation);
}

- (void)setLineWidth:(float)width
{
    WebCore::JSMainThreadNullState state;
    IMPL->setLineWidth(width);
}

- (void)setLineCap:(NSString *)cap
{
    WebCore::JSMainThreadNullState state;
    IMPL->setLineCap(cap);
}

- (void)setLineJoin:(NSString *)join
{
    WebCore::JSMainThreadNullState state;
    IMPL->setLineJoin(join);
}

- (void)setMiterLimit:(float)limit
{
    WebCore::JSMainThreadNullState state;
    IMPL->setMiterLimit(limit);
}

- (void)clearShadow
{
    WebCore::JSMainThreadNullState state;
    IMPL->clearShadow();
}

- (void)fillText
{
    WebCore::JSMainThreadNullState state;
    IMPL->fillText();
}

- (void)strokeText
{
    WebCore::JSMainThreadNullState state;
    IMPL->strokeText();
}

- (void)setStrokeColor
{
    WebCore::JSMainThreadNullState state;
    IMPL->setStrokeColor();
}

- (void)setFillColor
{
    WebCore::JSMainThreadNullState state;
    IMPL->setFillColor();
}

- (void)strokeRect
{
    WebCore::JSMainThreadNullState state;
    IMPL->strokeRect();
}

- (void)drawImage
{
    WebCore::JSMainThreadNullState state;
    IMPL->drawImage();
}

- (void)drawImageFromRect
{
    WebCore::JSMainThreadNullState state;
    IMPL->drawImageFromRect();
}

- (void)setShadow
{
    WebCore::JSMainThreadNullState state;
    IMPL->setShadow();
}

- (void)createPattern
{
    WebCore::JSMainThreadNullState state;
    IMPL->createPattern();
}

- (void)putImageData
{
    WebCore::JSMainThreadNullState state;
    IMPL->putImageData();
}

- (DOMImageData *)createImageData
{
    WebCore::JSMainThreadNullState state;
    return kit(WTF::getPtr(IMPL->createImageData()));
}

- (DOMImageData *)getImageData:(float)sx sy:(float)sy sw:(float)sw sh:(float)sh
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    DOMImageData *result = kit(WTF::getPtr(IMPL->getImageData(sx, sy, sw, sh, ec)));
    WebCore::raiseOnDOMError(ec);
    return result;
}

@end

WebCore::CanvasRenderingContext2D* core(DOMCanvasRenderingContext2D *wrapper)
{
    return wrapper ? reinterpret_cast<WebCore::CanvasRenderingContext2D*>(wrapper->_internal) : 0;
}

DOMCanvasRenderingContext2D *kit(WebCore::CanvasRenderingContext2D* value)
{
    { DOM_ASSERT_MAIN_THREAD(); WebCoreThreadViolationCheckRoundOne(); };
    return static_cast<DOMCanvasRenderingContext2D*>(kit(static_cast<WebCore::Node*>(value)));
}
