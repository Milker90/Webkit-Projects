/*
 * This file is part of the WebKit open source project.
 * This file has been generated by generate-bindings.pl. DO NOT MODIFY!
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE COMPUTER, INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE COMPUTER, INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 */

#import "config.h"
#import "DOMInternal.h"

#import "DOMDataView.h"

#import "DOMBlobInternal.h"
#import "DOMCSSRuleInternal.h"
#import "DOMCSSValueInternal.h"
#import "DOMDOMObjectInternal.h"
#import "DOMDataViewInternal.h"
#import "DOMEventInternal.h"
#import "DOMNodeInternal.h"
#import "DOMObject.h"
#import "DOMStyleSheetInternal.h"
#import "DataView.h"
#import "ExceptionHandlers.h"
#import "JSMainThreadExecState.h"
#import "ThreadCheck.h"
#import "WebScriptObjectPrivate.h"
#import <wtf/GetPtr.h>

#define IMPL static_cast<WebCore::DataView*>(reinterpret_cast<WebCore::Node*>(_internal))

@implementation DOMDataView

- (DOMDOMObject *)getInt8
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    DOMDOMObject *result = kit(WTF::getPtr(IMPL->getInt8(ec)));
    WebCore::raiseOnDOMError(ec);
    return result;
}

- (DOMDOMObject *)getUint8
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    DOMDOMObject *result = kit(WTF::getPtr(IMPL->getUint8(ec)));
    WebCore::raiseOnDOMError(ec);
    return result;
}

- (short)getInt16:(unsigned)byteOffset littleEndian:(BOOL)littleEndian
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    short result = IMPL->getInt16(byteOffset, littleEndian, ec);
    WebCore::raiseOnDOMError(ec);
    return result;
}

- (unsigned short)getUint16:(unsigned)byteOffset littleEndian:(BOOL)littleEndian
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    unsigned short result = IMPL->getUint16(byteOffset, littleEndian, ec);
    WebCore::raiseOnDOMError(ec);
    return result;
}

- (int)getInt32:(unsigned)byteOffset littleEndian:(BOOL)littleEndian
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    int result = IMPL->getInt32(byteOffset, littleEndian, ec);
    WebCore::raiseOnDOMError(ec);
    return result;
}

- (unsigned)getUint32:(unsigned)byteOffset littleEndian:(BOOL)littleEndian
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    unsigned result = IMPL->getUint32(byteOffset, littleEndian, ec);
    WebCore::raiseOnDOMError(ec);
    return result;
}

- (float)getFloat32:(unsigned)byteOffset littleEndian:(BOOL)littleEndian
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    float result = IMPL->getFloat32(byteOffset, littleEndian, ec);
    WebCore::raiseOnDOMError(ec);
    return result;
}

- (double)getFloat64:(unsigned)byteOffset littleEndian:(BOOL)littleEndian
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    double result = IMPL->getFloat64(byteOffset, littleEndian, ec);
    WebCore::raiseOnDOMError(ec);
    return result;
}

- (void)setInt8
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->setInt8(ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)setUint8
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->setUint8(ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)setInt16:(unsigned)byteOffset value:(short)value littleEndian:(BOOL)littleEndian
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->setInt16(byteOffset, value, littleEndian, ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)setUint16:(unsigned)byteOffset value:(unsigned short)value littleEndian:(BOOL)littleEndian
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->setUint16(byteOffset, value, littleEndian, ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)setInt32:(unsigned)byteOffset value:(int)value littleEndian:(BOOL)littleEndian
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->setInt32(byteOffset, value, littleEndian, ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)setUint32:(unsigned)byteOffset value:(unsigned)value littleEndian:(BOOL)littleEndian
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->setUint32(byteOffset, value, littleEndian, ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)setFloat32:(unsigned)byteOffset value:(float)value littleEndian:(BOOL)littleEndian
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->setFloat32(byteOffset, value, littleEndian, ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)setFloat64:(unsigned)byteOffset value:(double)value littleEndian:(BOOL)littleEndian
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->setFloat64(byteOffset, value, littleEndian, ec);
    WebCore::raiseOnDOMError(ec);
}

@end

WebCore::DataView* core(DOMDataView *wrapper)
{
    return wrapper ? reinterpret_cast<WebCore::DataView*>(wrapper->_internal) : 0;
}

DOMDataView *kit(WebCore::DataView* value)
{
    { DOM_ASSERT_MAIN_THREAD(); WebCoreThreadViolationCheckRoundOne(); };
    return static_cast<DOMDataView*>(kit(static_cast<WebCore::Node*>(value)));
}
