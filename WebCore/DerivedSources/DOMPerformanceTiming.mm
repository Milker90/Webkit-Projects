/*
 * This file is part of the WebKit open source project.
 * This file has been generated by generate-bindings.pl. DO NOT MODIFY!
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE COMPUTER, INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE COMPUTER, INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 */

#import "config.h"

#if ENABLE(WEB_TIMING)

#import "DOMInternal.h"

#import "DOMPerformanceTiming.h"

#import "DOMBlobInternal.h"
#import "DOMCSSRuleInternal.h"
#import "DOMCSSValueInternal.h"
#import "DOMEventInternal.h"
#import "DOMNodeInternal.h"
#import "DOMPerformanceTimingInternal.h"
#import "DOMStyleSheetInternal.h"
#import "ExceptionHandlers.h"
#import "JSMainThreadExecState.h"
#import "PerformanceTiming.h"
#import "ThreadCheck.h"
#import "WebCoreObjCExtras.h"
#import "WebScriptObjectPrivate.h"
#import <wtf/GetPtr.h>

#define IMPL reinterpret_cast<WebCore::PerformanceTiming*>(_internal)

@implementation DOMPerformanceTiming

- (void)dealloc
{
    if (WebCoreObjCScheduleDeallocateOnMainThread([DOMPerformanceTiming class], self))
        return;

    if (_internal)
        IMPL->deref();
    [super dealloc];
}

- (void)finalize
{
    if (_internal)
        IMPL->deref();
    [super finalize];
}

- (unsigned long long)navigationStart
{
    WebCore::JSMainThreadNullState state;
    return IMPL->navigationStart();
}

- (unsigned long long)unloadEventStart
{
    WebCore::JSMainThreadNullState state;
    return IMPL->unloadEventStart();
}

- (unsigned long long)unloadEventEnd
{
    WebCore::JSMainThreadNullState state;
    return IMPL->unloadEventEnd();
}

- (unsigned long long)redirectStart
{
    WebCore::JSMainThreadNullState state;
    return IMPL->redirectStart();
}

- (unsigned long long)redirectEnd
{
    WebCore::JSMainThreadNullState state;
    return IMPL->redirectEnd();
}

- (unsigned long long)fetchStart
{
    WebCore::JSMainThreadNullState state;
    return IMPL->fetchStart();
}

- (unsigned long long)domainLookupStart
{
    WebCore::JSMainThreadNullState state;
    return IMPL->domainLookupStart();
}

- (unsigned long long)domainLookupEnd
{
    WebCore::JSMainThreadNullState state;
    return IMPL->domainLookupEnd();
}

- (unsigned long long)connectStart
{
    WebCore::JSMainThreadNullState state;
    return IMPL->connectStart();
}

- (unsigned long long)connectEnd
{
    WebCore::JSMainThreadNullState state;
    return IMPL->connectEnd();
}

- (unsigned long long)secureConnectionStart
{
    WebCore::JSMainThreadNullState state;
    return IMPL->secureConnectionStart();
}

- (unsigned long long)requestStart
{
    WebCore::JSMainThreadNullState state;
    return IMPL->requestStart();
}

- (unsigned long long)responseStart
{
    WebCore::JSMainThreadNullState state;
    return IMPL->responseStart();
}

- (unsigned long long)responseEnd
{
    WebCore::JSMainThreadNullState state;
    return IMPL->responseEnd();
}

- (unsigned long long)domLoading
{
    WebCore::JSMainThreadNullState state;
    return IMPL->domLoading();
}

- (unsigned long long)domInteractive
{
    WebCore::JSMainThreadNullState state;
    return IMPL->domInteractive();
}

- (unsigned long long)domContentLoadedEventStart
{
    WebCore::JSMainThreadNullState state;
    return IMPL->domContentLoadedEventStart();
}

- (unsigned long long)domContentLoadedEventEnd
{
    WebCore::JSMainThreadNullState state;
    return IMPL->domContentLoadedEventEnd();
}

- (unsigned long long)domComplete
{
    WebCore::JSMainThreadNullState state;
    return IMPL->domComplete();
}

- (unsigned long long)loadEventStart
{
    WebCore::JSMainThreadNullState state;
    return IMPL->loadEventStart();
}

- (unsigned long long)loadEventEnd
{
    WebCore::JSMainThreadNullState state;
    return IMPL->loadEventEnd();
}

@end

WebCore::PerformanceTiming* core(DOMPerformanceTiming *wrapper)
{
    return wrapper ? reinterpret_cast<WebCore::PerformanceTiming*>(wrapper->_internal) : 0;
}

DOMPerformanceTiming *kit(WebCore::PerformanceTiming* value)
{
    { DOM_ASSERT_MAIN_THREAD(); WebCoreThreadViolationCheckRoundOne(); };
    if (!value)
        return nil;
    if (DOMPerformanceTiming *wrapper = getDOMWrapper(value))
        return [[wrapper retain] autorelease];
    DOMPerformanceTiming *wrapper = [[DOMPerformanceTiming alloc] _init];
    wrapper->_internal = reinterpret_cast<DOMObjectInternal*>(value);
    value->ref();
    addDOMWrapper(wrapper, value);
    return [wrapper autorelease];
}

#endif // ENABLE(WEB_TIMING)
