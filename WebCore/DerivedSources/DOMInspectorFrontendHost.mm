/*
 * This file is part of the WebKit open source project.
 * This file has been generated by generate-bindings.pl. DO NOT MODIFY!
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE COMPUTER, INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE COMPUTER, INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 */

#import "config.h"

#if ENABLE(INSPECTOR)

#import "DOMInternal.h"

#import "DOMInspectorFrontendHost.h"

#import "DOMBlobInternal.h"
#import "DOMCSSRuleInternal.h"
#import "DOMCSSValueInternal.h"
#import "DOMDOMObjectInternal.h"
#import "DOMEventInternal.h"
#import "DOMInspectorFrontendHostInternal.h"
#import "DOMMouseEventInternal.h"
#import "DOMNodeInternal.h"
#import "DOMObject.h"
#import "DOMStyleSheetInternal.h"
#import "ExceptionHandlers.h"
#import "InspectorFrontendHost.h"
#import "JSMainThreadExecState.h"
#import "KURL.h"
#import "MouseEvent.h"
#import "ThreadCheck.h"
#import "WebCoreObjCExtras.h"
#import "WebScriptObjectPrivate.h"
#import <wtf/GetPtr.h>

#define IMPL reinterpret_cast<WebCore::InspectorFrontendHost*>(_internal)

@implementation DOMInspectorFrontendHost

- (void)dealloc
{
    if (WebCoreObjCScheduleDeallocateOnMainThread([DOMInspectorFrontendHost class], self))
        return;

    if (_internal)
        IMPL->deref();
    [super dealloc];
}

- (void)finalize
{
    if (_internal)
        IMPL->deref();
    [super finalize];
}

- (void)loaded
{
    WebCore::JSMainThreadNullState state;
    IMPL->loaded();
}

- (void)closeWindow
{
    WebCore::JSMainThreadNullState state;
    IMPL->closeWindow();
}

- (void)disconnectFromBackend
{
    WebCore::JSMainThreadNullState state;
    IMPL->disconnectFromBackend();
}

- (void)bringToFront
{
    WebCore::JSMainThreadNullState state;
    IMPL->bringToFront();
}

- (void)inspectedURLChanged:(NSString *)newURL
{
    WebCore::JSMainThreadNullState state;
    IMPL->inspectedURLChanged(newURL);
}

- (void)requestAttachWindow
{
    WebCore::JSMainThreadNullState state;
    IMPL->requestAttachWindow();
}

- (void)requestDetachWindow
{
    WebCore::JSMainThreadNullState state;
    IMPL->requestDetachWindow();
}

- (void)setAttachedWindowHeight:(unsigned)height
{
    WebCore::JSMainThreadNullState state;
    IMPL->setAttachedWindowHeight(height);
}

- (void)moveWindowBy:(float)x y:(float)y
{
    WebCore::JSMainThreadNullState state;
    IMPL->moveWindowBy(x, y);
}

- (void)setExtensionAPI:(NSString *)script
{
    WebCore::JSMainThreadNullState state;
    IMPL->setExtensionAPI(script);
}

- (NSString *)localizedStringsURL
{
    WebCore::JSMainThreadNullState state;
    return IMPL->localizedStringsURL();
}

- (NSString *)hiddenPanels
{
    WebCore::JSMainThreadNullState state;
    return IMPL->hiddenPanels();
}

- (void)saveSessionSetting:(NSString *)key value:(NSString *)value
{
    WebCore::JSMainThreadNullState state;
    IMPL->saveSessionSetting(key, value);
}

- (NSString *)loadSessionSetting:(NSString *)key
{
    WebCore::JSMainThreadNullState state;
    return IMPL->loadSessionSetting(key);
}

- (void)copyText:(NSString *)text
{
    WebCore::JSMainThreadNullState state;
    IMPL->copyText(text);
}

- (void)saveAs:(NSString *)fileName content:(NSString *)content
{
    WebCore::JSMainThreadNullState state;
    IMPL->saveAs(fileName, content);
}

- (NSString *)platform
{
    WebCore::JSMainThreadNullState state;
    return IMPL->platform();
}

- (NSString *)port
{
    WebCore::JSMainThreadNullState state;
    return IMPL->port();
}

- (void)showContextMenu:(DOMMouseEvent *)event items:(DOMDOMObject *)items
{
    WebCore::JSMainThreadNullState state;
    IMPL->showContextMenu(core(event), core(items));
}

- (void)sendMessageToBackend:(NSString *)message
{
    WebCore::JSMainThreadNullState state;
    IMPL->sendMessageToBackend(message);
}

@end

WebCore::InspectorFrontendHost* core(DOMInspectorFrontendHost *wrapper)
{
    return wrapper ? reinterpret_cast<WebCore::InspectorFrontendHost*>(wrapper->_internal) : 0;
}

DOMInspectorFrontendHost *kit(WebCore::InspectorFrontendHost* value)
{
    { DOM_ASSERT_MAIN_THREAD(); WebCoreThreadViolationCheckRoundOne(); };
    if (!value)
        return nil;
    if (DOMInspectorFrontendHost *wrapper = getDOMWrapper(value))
        return [[wrapper retain] autorelease];
    DOMInspectorFrontendHost *wrapper = [[DOMInspectorFrontendHost alloc] _init];
    wrapper->_internal = reinterpret_cast<DOMObjectInternal*>(value);
    value->ref();
    addDOMWrapper(wrapper, value);
    return [wrapper autorelease];
}

#endif // ENABLE(INSPECTOR)
