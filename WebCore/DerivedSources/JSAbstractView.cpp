/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSAbstractView.h"

#include "AbstractView.h"
#include "Document.h"
#include "JSDocument.h"
#include "JSStyleMedia.h"
#include "StyleMedia.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSAbstractView);

/* Hash table */
#if ENABLE(JIT)
#define THUNK_GENERATOR(generator) , generator
#else
#define THUNK_GENERATOR(generator)
#endif

static const HashTableValue JSAbstractViewTableValues[3] =
{
    { "document", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAbstractViewDocument), (intptr_t)0 THUNK_GENERATOR(0) },
    { "styleMedia", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAbstractViewStyleMedia), (intptr_t)0 THUNK_GENERATOR(0) },
    { 0, 0, 0, 0 THUNK_GENERATOR(0) }
};

#undef THUNK_GENERATOR
static JSC_CONST_HASHTABLE HashTable JSAbstractViewTable = { 4, 3, JSAbstractViewTableValues, 0 };
/* Hash table for prototype */
#if ENABLE(JIT)
#define THUNK_GENERATOR(generator) , generator
#else
#define THUNK_GENERATOR(generator)
#endif

static const HashTableValue JSAbstractViewPrototypeTableValues[1] =
{
    { 0, 0, 0, 0 THUNK_GENERATOR(0) }
};

#undef THUNK_GENERATOR
static JSC_CONST_HASHTABLE HashTable JSAbstractViewPrototypeTable = { 1, 0, JSAbstractViewPrototypeTableValues, 0 };
const ClassInfo JSAbstractViewPrototype::s_info = { "AbstractViewPrototype", &JSC::JSObjectWithGlobalObject::s_info, &JSAbstractViewPrototypeTable, 0 };

JSObject* JSAbstractViewPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSAbstractView>(exec, globalObject);
}

const ClassInfo JSAbstractView::s_info = { "AbstractView", &JSDOMWrapper::s_info, &JSAbstractViewTable, 0 };

JSAbstractView::JSAbstractView(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<AbstractView> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl)
{
    ASSERT(inherits(&s_info));
}

JSObject* JSAbstractView::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return new (exec) JSAbstractViewPrototype(exec->globalData(), globalObject, JSAbstractViewPrototype::createStructure(globalObject->globalData(), globalObject->objectPrototype()));
}

bool JSAbstractView::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    ASSERT_GC_OBJECT_INHERITS(this, &s_info);
    return getStaticValueSlot<JSAbstractView, Base>(exec, &JSAbstractViewTable, this, propertyName, slot);
}

bool JSAbstractView::getOwnPropertyDescriptor(ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    ASSERT_GC_OBJECT_INHERITS(this, &s_info);
    return getStaticValueDescriptor<JSAbstractView, Base>(exec, &JSAbstractViewTable, this, propertyName, descriptor);
}

JSValue jsAbstractViewDocument(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSAbstractView* castedThis = static_cast<JSAbstractView*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    AbstractView* imp = static_cast<AbstractView*>(castedThis->impl());
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(imp->document()));
    return result;
}


JSValue jsAbstractViewStyleMedia(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSAbstractView* castedThis = static_cast<JSAbstractView*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    AbstractView* imp = static_cast<AbstractView*>(castedThis->impl());
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(imp->styleMedia()));
    return result;
}


JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, AbstractView* impl)
{
    return wrap<JSAbstractView>(exec, globalObject, impl);
}

AbstractView* toAbstractView(JSC::JSValue value)
{
    return value.inherits(&JSAbstractView::s_info) ? static_cast<JSAbstractView*>(asObject(value))->impl() : 0;
}

}
