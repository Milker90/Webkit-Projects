/*
 * This file is part of the WebKit open source project.
 * This file has been generated by generate-bindings.pl. DO NOT MODIFY!
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE COMPUTER, INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE COMPUTER, INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 */

#import "config.h"

#if ENABLE(WEBGL)

#import "DOMInternal.h"

#import "DOMWebGLRenderingContext.h"

#import "ArrayBuffer.h"
#import "ArrayBufferView.h"
#import "DOMArrayBufferInternal.h"
#import "DOMArrayBufferViewInternal.h"
#import "DOMBlobInternal.h"
#import "DOMCSSRuleInternal.h"
#import "DOMCSSValueInternal.h"
#import "DOMEventInternal.h"
#import "DOMFloat32ArrayInternal.h"
#import "DOMHTMLCanvasElementInternal.h"
#import "DOMHTMLImageElementInternal.h"
#import "DOMImageDataInternal.h"
#import "DOMInt32ArrayInternal.h"
#import "DOMNodeInternal.h"
#import "DOMStyleSheetInternal.h"
#import "DOMWebGLActiveInfoInternal.h"
#import "DOMWebGLBufferInternal.h"
#import "DOMWebGLContextAttributesInternal.h"
#import "DOMWebGLFramebufferInternal.h"
#import "DOMWebGLProgramInternal.h"
#import "DOMWebGLRenderbufferInternal.h"
#import "DOMWebGLRenderingContextInternal.h"
#import "DOMWebGLShaderInternal.h"
#import "DOMWebGLTextureInternal.h"
#import "DOMWebGLUniformLocationInternal.h"
#import "ExceptionHandlers.h"
#import "Float32Array.h"
#import "HTMLCanvasElement.h"
#import "HTMLImageElement.h"
#import "ImageData.h"
#import "Int32Array.h"
#import "JSMainThreadExecState.h"
#import "KURL.h"
#import "ThreadCheck.h"
#import "WebGLActiveInfo.h"
#import "WebGLBuffer.h"
#import "WebGLContextAttributes.h"
#import "WebGLFramebuffer.h"
#import "WebGLProgram.h"
#import "WebGLRenderbuffer.h"
#import "WebGLRenderingContext.h"
#import "WebGLShader.h"
#import "WebGLTexture.h"
#import "WebGLUniformLocation.h"
#import "WebScriptObjectPrivate.h"
#import <wtf/GetPtr.h>

#define IMPL static_cast<WebCore::WebGLRenderingContext*>(reinterpret_cast<WebCore::Node*>(_internal))

@implementation DOMWebGLRenderingContext

- (void)activeTexture:(unsigned)texture
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->activeTexture(texture, ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)attachShader:(DOMWebGLProgram *)program shader:(DOMWebGLShader *)shader
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->attachShader(core(program), core(shader), ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)bindAttribLocation:(DOMWebGLProgram *)program index:(unsigned)index name:(NSString *)name
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->bindAttribLocation(core(program), index, name, ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)bindBuffer:(unsigned)target buffer:(DOMWebGLBuffer *)buffer
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->bindBuffer(target, core(buffer), ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)bindFramebuffer:(unsigned)target framebuffer:(DOMWebGLFramebuffer *)framebuffer
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->bindFramebuffer(target, core(framebuffer), ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)bindRenderbuffer:(unsigned)target renderbuffer:(DOMWebGLRenderbuffer *)renderbuffer
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->bindRenderbuffer(target, core(renderbuffer), ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)bindTexture:(unsigned)target texture:(DOMWebGLTexture *)texture
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->bindTexture(target, core(texture), ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)blendColor:(float)red green:(float)green blue:(float)blue alpha:(float)alpha
{
    WebCore::JSMainThreadNullState state;
    IMPL->blendColor(red, green, blue, alpha);
}

- (void)blendEquation:(unsigned)mode
{
    WebCore::JSMainThreadNullState state;
    IMPL->blendEquation(mode);
}

- (void)blendEquationSeparate:(unsigned)modeRGB modeAlpha:(unsigned)modeAlpha
{
    WebCore::JSMainThreadNullState state;
    IMPL->blendEquationSeparate(modeRGB, modeAlpha);
}

- (void)blendFunc:(unsigned)sfactor dfactor:(unsigned)dfactor
{
    WebCore::JSMainThreadNullState state;
    IMPL->blendFunc(sfactor, dfactor);
}

- (void)blendFuncSeparate:(unsigned)srcRGB dstRGB:(unsigned)dstRGB srcAlpha:(unsigned)srcAlpha dstAlpha:(unsigned)dstAlpha
{
    WebCore::JSMainThreadNullState state;
    IMPL->blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);
}

- (void)bufferData:(unsigned)target data:(DOMArrayBuffer *)data usage:(unsigned)usage
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->bufferData(target, core(data), usage, ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)bufferData:(unsigned)target data:(DOMArrayBufferView *)data usage:(unsigned)usage
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->bufferData(target, core(data), usage, ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)bufferData:(unsigned)target size:(int)size usage:(unsigned)usage
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->bufferData(target, size, usage, ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)bufferSubData:(unsigned)target offset:(int)offset data:(DOMArrayBuffer *)data
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->bufferSubData(target, offset, core(data), ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)bufferSubData:(unsigned)target offset:(int)offset data:(DOMArrayBufferView *)data
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->bufferSubData(target, offset, core(data), ec);
    WebCore::raiseOnDOMError(ec);
}

- (unsigned)checkFramebufferStatus:(unsigned)target
{
    WebCore::JSMainThreadNullState state;
    return IMPL->checkFramebufferStatus(target);
}

- (void)clear:(unsigned)mask
{
    WebCore::JSMainThreadNullState state;
    IMPL->clear(mask);
}

- (void)clearColor:(float)red green:(float)green blue:(float)blue alpha:(float)alpha
{
    WebCore::JSMainThreadNullState state;
    IMPL->clearColor(red, green, blue, alpha);
}

- (void)clearDepth:(float)depth
{
    WebCore::JSMainThreadNullState state;
    IMPL->clearDepth(depth);
}

- (void)clearStencil:(int)s
{
    WebCore::JSMainThreadNullState state;
    IMPL->clearStencil(s);
}

- (void)colorMask:(BOOL)red green:(BOOL)green blue:(BOOL)blue alpha:(BOOL)alpha
{
    WebCore::JSMainThreadNullState state;
    IMPL->colorMask(red, green, blue, alpha);
}

- (void)compileShader:(DOMWebGLShader *)shader
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->compileShader(core(shader), ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)copyTexImage2D:(unsigned)target level:(int)level internalformat:(unsigned)internalformat x:(int)x y:(int)y width:(int)width height:(int)height border:(int)border
{
    WebCore::JSMainThreadNullState state;
    IMPL->copyTexImage2D(target, level, internalformat, x, y, width, height, border);
}

- (void)copyTexSubImage2D:(unsigned)target level:(int)level xoffset:(int)xoffset yoffset:(int)yoffset x:(int)x y:(int)y width:(int)width height:(int)height
{
    WebCore::JSMainThreadNullState state;
    IMPL->copyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
}

- (DOMWebGLBuffer *)createBuffer
{
    WebCore::JSMainThreadNullState state;
    return kit(WTF::getPtr(IMPL->createBuffer()));
}

- (DOMWebGLFramebuffer *)createFramebuffer
{
    WebCore::JSMainThreadNullState state;
    return kit(WTF::getPtr(IMPL->createFramebuffer()));
}

- (DOMWebGLProgram *)createProgram
{
    WebCore::JSMainThreadNullState state;
    return kit(WTF::getPtr(IMPL->createProgram()));
}

- (DOMWebGLRenderbuffer *)createRenderbuffer
{
    WebCore::JSMainThreadNullState state;
    return kit(WTF::getPtr(IMPL->createRenderbuffer()));
}

- (DOMWebGLShader *)createShader:(unsigned)type
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    DOMWebGLShader *result = kit(WTF::getPtr(IMPL->createShader(type, ec)));
    WebCore::raiseOnDOMError(ec);
    return result;
}

- (DOMWebGLTexture *)createTexture
{
    WebCore::JSMainThreadNullState state;
    return kit(WTF::getPtr(IMPL->createTexture()));
}

- (void)cullFace:(unsigned)mode
{
    WebCore::JSMainThreadNullState state;
    IMPL->cullFace(mode);
}

- (void)deleteBuffer:(DOMWebGLBuffer *)buffer
{
    WebCore::JSMainThreadNullState state;
    IMPL->deleteBuffer(core(buffer));
}

- (void)deleteFramebuffer:(DOMWebGLFramebuffer *)framebuffer
{
    WebCore::JSMainThreadNullState state;
    IMPL->deleteFramebuffer(core(framebuffer));
}

- (void)deleteProgram:(DOMWebGLProgram *)program
{
    WebCore::JSMainThreadNullState state;
    IMPL->deleteProgram(core(program));
}

- (void)deleteRenderbuffer:(DOMWebGLRenderbuffer *)renderbuffer
{
    WebCore::JSMainThreadNullState state;
    IMPL->deleteRenderbuffer(core(renderbuffer));
}

- (void)deleteShader:(DOMWebGLShader *)shader
{
    WebCore::JSMainThreadNullState state;
    IMPL->deleteShader(core(shader));
}

- (void)deleteTexture:(DOMWebGLTexture *)texture
{
    WebCore::JSMainThreadNullState state;
    IMPL->deleteTexture(core(texture));
}

- (void)depthFunc:(unsigned)func
{
    WebCore::JSMainThreadNullState state;
    IMPL->depthFunc(func);
}

- (void)depthMask:(BOOL)flag
{
    WebCore::JSMainThreadNullState state;
    IMPL->depthMask(flag);
}

- (void)depthRange:(float)zNear zFar:(float)zFar
{
    WebCore::JSMainThreadNullState state;
    IMPL->depthRange(zNear, zFar);
}

- (void)detachShader:(DOMWebGLProgram *)program shader:(DOMWebGLShader *)shader
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->detachShader(core(program), core(shader), ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)disable:(unsigned)cap
{
    WebCore::JSMainThreadNullState state;
    IMPL->disable(cap);
}

- (void)disableVertexAttribArray:(unsigned)index
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->disableVertexAttribArray(index, ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)drawArrays:(unsigned)mode first:(int)first count:(int)count
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->drawArrays(mode, first, count, ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)drawElements:(unsigned)mode count:(int)count type:(unsigned)type offset:(int)offset
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->drawElements(mode, count, type, offset, ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)enable:(unsigned)cap
{
    WebCore::JSMainThreadNullState state;
    IMPL->enable(cap);
}

- (void)enableVertexAttribArray:(unsigned)index
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->enableVertexAttribArray(index, ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)finish
{
    WebCore::JSMainThreadNullState state;
    IMPL->finish();
}

- (void)flush
{
    WebCore::JSMainThreadNullState state;
    IMPL->flush();
}

- (void)framebufferRenderbuffer:(unsigned)target attachment:(unsigned)attachment renderbuffertarget:(unsigned)renderbuffertarget renderbuffer:(DOMWebGLRenderbuffer *)renderbuffer
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->framebufferRenderbuffer(target, attachment, renderbuffertarget, core(renderbuffer), ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)framebufferTexture2D:(unsigned)target attachment:(unsigned)attachment textarget:(unsigned)textarget texture:(DOMWebGLTexture *)texture level:(int)level
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->framebufferTexture2D(target, attachment, textarget, core(texture), level, ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)frontFace:(unsigned)mode
{
    WebCore::JSMainThreadNullState state;
    IMPL->frontFace(mode);
}

- (void)generateMipmap:(unsigned)target
{
    WebCore::JSMainThreadNullState state;
    IMPL->generateMipmap(target);
}

- (DOMWebGLActiveInfo *)getActiveAttrib:(DOMWebGLProgram *)program index:(unsigned)index
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    DOMWebGLActiveInfo *result = kit(WTF::getPtr(IMPL->getActiveAttrib(core(program), index, ec)));
    WebCore::raiseOnDOMError(ec);
    return result;
}

- (DOMWebGLActiveInfo *)getActiveUniform:(DOMWebGLProgram *)program index:(unsigned)index
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    DOMWebGLActiveInfo *result = kit(WTF::getPtr(IMPL->getActiveUniform(core(program), index, ec)));
    WebCore::raiseOnDOMError(ec);
    return result;
}

- (void)getAttachedShaders:(DOMWebGLProgram *)program
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->getAttachedShaders(core(program), ec);
    WebCore::raiseOnDOMError(ec);
}

- (int)getAttribLocation:(DOMWebGLProgram *)program name:(NSString *)name
{
    WebCore::JSMainThreadNullState state;
    return IMPL->getAttribLocation(core(program), name);
}

- (void)getBufferParameter
{
    WebCore::JSMainThreadNullState state;
    IMPL->getBufferParameter();
}

- (DOMWebGLContextAttributes *)getContextAttributes
{
    WebCore::JSMainThreadNullState state;
    return kit(WTF::getPtr(IMPL->getContextAttributes()));
}

- (unsigned)getError
{
    WebCore::JSMainThreadNullState state;
    return IMPL->getError();
}

- (void)getExtension:(NSString *)name
{
    WebCore::JSMainThreadNullState state;
    IMPL->getExtension(name);
}

- (void)getFramebufferAttachmentParameter
{
    WebCore::JSMainThreadNullState state;
    IMPL->getFramebufferAttachmentParameter();
}

- (void)getParameter
{
    WebCore::JSMainThreadNullState state;
    IMPL->getParameter();
}

- (void)getProgramParameter
{
    WebCore::JSMainThreadNullState state;
    IMPL->getProgramParameter();
}

- (NSString *)getProgramInfoLog:(DOMWebGLProgram *)program
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    NSString *result = IMPL->getProgramInfoLog(core(program), ec);
    WebCore::raiseOnDOMError(ec);
    return result;
}

- (void)getRenderbufferParameter
{
    WebCore::JSMainThreadNullState state;
    IMPL->getRenderbufferParameter();
}

- (void)getShaderParameter
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->getShaderParameter(ec);
    WebCore::raiseOnDOMError(ec);
}

- (NSString *)getShaderInfoLog:(DOMWebGLShader *)shader
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    NSString *result = IMPL->getShaderInfoLog(core(shader), ec);
    WebCore::raiseOnDOMError(ec);
    return result;
}

- (NSString *)getShaderSource:(DOMWebGLShader *)shader
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    NSString *result = IMPL->getShaderSource(core(shader), ec);
    WebCore::raiseOnDOMError(ec);
    return result;
}

- (void)getSupportedExtensions
{
    WebCore::JSMainThreadNullState state;
    IMPL->getSupportedExtensions();
}

- (void)getTexParameter
{
    WebCore::JSMainThreadNullState state;
    IMPL->getTexParameter();
}

- (void)getUniform
{
    WebCore::JSMainThreadNullState state;
    IMPL->getUniform();
}

- (DOMWebGLUniformLocation *)getUniformLocation:(DOMWebGLProgram *)program name:(NSString *)name
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    DOMWebGLUniformLocation *result = kit(WTF::getPtr(IMPL->getUniformLocation(core(program), name, ec)));
    WebCore::raiseOnDOMError(ec);
    return result;
}

- (void)getVertexAttrib
{
    WebCore::JSMainThreadNullState state;
    IMPL->getVertexAttrib();
}

- (int)getVertexAttribOffset:(unsigned)index pname:(unsigned)pname
{
    WebCore::JSMainThreadNullState state;
    return IMPL->getVertexAttribOffset(index, pname);
}

- (void)hint:(unsigned)target mode:(unsigned)mode
{
    WebCore::JSMainThreadNullState state;
    IMPL->hint(target, mode);
}

- (BOOL)isBuffer:(DOMWebGLBuffer *)buffer
{
    WebCore::JSMainThreadNullState state;
    return IMPL->isBuffer(core(buffer));
}

- (BOOL)isContextLost
{
    WebCore::JSMainThreadNullState state;
    return IMPL->isContextLost();
}

- (BOOL)isEnabled:(unsigned)cap
{
    WebCore::JSMainThreadNullState state;
    return IMPL->isEnabled(cap);
}

- (BOOL)isFramebuffer:(DOMWebGLFramebuffer *)framebuffer
{
    WebCore::JSMainThreadNullState state;
    return IMPL->isFramebuffer(core(framebuffer));
}

- (BOOL)isProgram:(DOMWebGLProgram *)program
{
    WebCore::JSMainThreadNullState state;
    return IMPL->isProgram(core(program));
}

- (BOOL)isRenderbuffer:(DOMWebGLRenderbuffer *)renderbuffer
{
    WebCore::JSMainThreadNullState state;
    return IMPL->isRenderbuffer(core(renderbuffer));
}

- (BOOL)isShader:(DOMWebGLShader *)shader
{
    WebCore::JSMainThreadNullState state;
    return IMPL->isShader(core(shader));
}

- (BOOL)isTexture:(DOMWebGLTexture *)texture
{
    WebCore::JSMainThreadNullState state;
    return IMPL->isTexture(core(texture));
}

- (void)lineWidth:(float)width
{
    WebCore::JSMainThreadNullState state;
    IMPL->lineWidth(width);
}

- (void)linkProgram:(DOMWebGLProgram *)program
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->linkProgram(core(program), ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)pixelStorei:(unsigned)pname param:(int)param
{
    WebCore::JSMainThreadNullState state;
    IMPL->pixelStorei(pname, param);
}

- (void)polygonOffset:(float)factor units:(float)units
{
    WebCore::JSMainThreadNullState state;
    IMPL->polygonOffset(factor, units);
}

- (void)readPixels:(int)x y:(int)y width:(int)width height:(int)height format:(unsigned)format type:(unsigned)type pixels:(DOMArrayBufferView *)pixels
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->readPixels(x, y, width, height, format, type, core(pixels), ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)releaseShaderCompiler
{
    WebCore::JSMainThreadNullState state;
    IMPL->releaseShaderCompiler();
}

- (void)renderbufferStorage:(unsigned)target internalformat:(unsigned)internalformat width:(int)width height:(int)height
{
    WebCore::JSMainThreadNullState state;
    IMPL->renderbufferStorage(target, internalformat, width, height);
}

- (void)sampleCoverage:(float)value invert:(BOOL)invert
{
    WebCore::JSMainThreadNullState state;
    IMPL->sampleCoverage(value, invert);
}

- (void)scissor:(int)x y:(int)y width:(int)width height:(int)height
{
    WebCore::JSMainThreadNullState state;
    IMPL->scissor(x, y, width, height);
}

- (void)shaderSource:(DOMWebGLShader *)shader string:(NSString *)string
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->shaderSource(core(shader), string, ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)stencilFunc:(unsigned)func ref:(int)ref mask:(unsigned)mask
{
    WebCore::JSMainThreadNullState state;
    IMPL->stencilFunc(func, ref, mask);
}

- (void)stencilFuncSeparate:(unsigned)face func:(unsigned)func ref:(int)ref mask:(unsigned)mask
{
    WebCore::JSMainThreadNullState state;
    IMPL->stencilFuncSeparate(face, func, ref, mask);
}

- (void)stencilMask:(unsigned)mask
{
    WebCore::JSMainThreadNullState state;
    IMPL->stencilMask(mask);
}

- (void)stencilMaskSeparate:(unsigned)face mask:(unsigned)mask
{
    WebCore::JSMainThreadNullState state;
    IMPL->stencilMaskSeparate(face, mask);
}

- (void)stencilOp:(unsigned)fail zfail:(unsigned)zfail zpass:(unsigned)zpass
{
    WebCore::JSMainThreadNullState state;
    IMPL->stencilOp(fail, zfail, zpass);
}

- (void)stencilOpSeparate:(unsigned)face fail:(unsigned)fail zfail:(unsigned)zfail zpass:(unsigned)zpass
{
    WebCore::JSMainThreadNullState state;
    IMPL->stencilOpSeparate(face, fail, zfail, zpass);
}

- (void)texParameterf:(unsigned)target pname:(unsigned)pname param:(float)param
{
    WebCore::JSMainThreadNullState state;
    IMPL->texParameterf(target, pname, param);
}

- (void)texParameteri:(unsigned)target pname:(unsigned)pname param:(int)param
{
    WebCore::JSMainThreadNullState state;
    IMPL->texParameteri(target, pname, param);
}

- (void)texImage2D:(unsigned)target level:(int)level internalformat:(unsigned)internalformat width:(int)width height:(int)height border:(int)border format:(unsigned)format type:(unsigned)type pixels:(DOMArrayBufferView *)pixels
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->texImage2D(target, level, internalformat, width, height, border, format, type, core(pixels), ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)texImage2D:(unsigned)target level:(int)level internalformat:(unsigned)internalformat format:(unsigned)format type:(unsigned)type pixels:(DOMImageData *)pixels
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->texImage2D(target, level, internalformat, format, type, core(pixels), ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)texImage2D:(unsigned)target level:(int)level internalformat:(unsigned)internalformat format:(unsigned)format type:(unsigned)type image:(DOMHTMLImageElement *)image
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->texImage2D(target, level, internalformat, format, type, core(image), ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)texImage2D:(unsigned)target level:(int)level internalformat:(unsigned)internalformat format:(unsigned)format type:(unsigned)type canvas:(DOMHTMLCanvasElement *)canvas
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->texImage2D(target, level, internalformat, format, type, core(canvas), ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)texSubImage2D:(unsigned)target level:(int)level xoffset:(int)xoffset yoffset:(int)yoffset width:(int)width height:(int)height format:(unsigned)format type:(unsigned)type pixels:(DOMArrayBufferView *)pixels
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, core(pixels), ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)texSubImage2D:(unsigned)target level:(int)level xoffset:(int)xoffset yoffset:(int)yoffset format:(unsigned)format type:(unsigned)type pixels:(DOMImageData *)pixels
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->texSubImage2D(target, level, xoffset, yoffset, format, type, core(pixels), ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)texSubImage2D:(unsigned)target level:(int)level xoffset:(int)xoffset yoffset:(int)yoffset format:(unsigned)format type:(unsigned)type image:(DOMHTMLImageElement *)image
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->texSubImage2D(target, level, xoffset, yoffset, format, type, core(image), ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)texSubImage2D:(unsigned)target level:(int)level xoffset:(int)xoffset yoffset:(int)yoffset format:(unsigned)format type:(unsigned)type canvas:(DOMHTMLCanvasElement *)canvas
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->texSubImage2D(target, level, xoffset, yoffset, format, type, core(canvas), ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)uniform1f:(DOMWebGLUniformLocation *)location x:(float)x
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->uniform1f(core(location), x, ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)uniform1fv:(DOMWebGLUniformLocation *)location v:(DOMFloat32Array *)v
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->uniform1fv(core(location), core(v), ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)uniform1i:(DOMWebGLUniformLocation *)location x:(int)x
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->uniform1i(core(location), x, ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)uniform1iv:(DOMWebGLUniformLocation *)location v:(DOMInt32Array *)v
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->uniform1iv(core(location), core(v), ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)uniform2f:(DOMWebGLUniformLocation *)location x:(float)x y:(float)y
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->uniform2f(core(location), x, y, ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)uniform2fv:(DOMWebGLUniformLocation *)location v:(DOMFloat32Array *)v
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->uniform2fv(core(location), core(v), ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)uniform2i:(DOMWebGLUniformLocation *)location x:(int)x y:(int)y
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->uniform2i(core(location), x, y, ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)uniform2iv:(DOMWebGLUniformLocation *)location v:(DOMInt32Array *)v
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->uniform2iv(core(location), core(v), ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)uniform3f:(DOMWebGLUniformLocation *)location x:(float)x y:(float)y z:(float)z
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->uniform3f(core(location), x, y, z, ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)uniform3fv:(DOMWebGLUniformLocation *)location v:(DOMFloat32Array *)v
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->uniform3fv(core(location), core(v), ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)uniform3i:(DOMWebGLUniformLocation *)location x:(int)x y:(int)y z:(int)z
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->uniform3i(core(location), x, y, z, ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)uniform3iv:(DOMWebGLUniformLocation *)location v:(DOMInt32Array *)v
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->uniform3iv(core(location), core(v), ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)uniform4f:(DOMWebGLUniformLocation *)location x:(float)x y:(float)y z:(float)z w:(float)w
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->uniform4f(core(location), x, y, z, w, ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)uniform4fv:(DOMWebGLUniformLocation *)location v:(DOMFloat32Array *)v
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->uniform4fv(core(location), core(v), ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)uniform4i:(DOMWebGLUniformLocation *)location x:(int)x y:(int)y z:(int)z w:(int)w
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->uniform4i(core(location), x, y, z, w, ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)uniform4iv:(DOMWebGLUniformLocation *)location v:(DOMInt32Array *)v
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->uniform4iv(core(location), core(v), ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)uniformMatrix2fv:(DOMWebGLUniformLocation *)location transpose:(BOOL)transpose array:(DOMFloat32Array *)array
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->uniformMatrix2fv(core(location), transpose, core(array), ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)uniformMatrix3fv:(DOMWebGLUniformLocation *)location transpose:(BOOL)transpose array:(DOMFloat32Array *)array
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->uniformMatrix3fv(core(location), transpose, core(array), ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)uniformMatrix4fv:(DOMWebGLUniformLocation *)location transpose:(BOOL)transpose array:(DOMFloat32Array *)array
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->uniformMatrix4fv(core(location), transpose, core(array), ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)useProgram:(DOMWebGLProgram *)program
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->useProgram(core(program), ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)validateProgram:(DOMWebGLProgram *)program
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->validateProgram(core(program), ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)vertexAttrib1f:(unsigned)indx x:(float)x
{
    WebCore::JSMainThreadNullState state;
    IMPL->vertexAttrib1f(indx, x);
}

- (void)vertexAttrib1fv:(unsigned)indx values:(DOMFloat32Array *)values
{
    WebCore::JSMainThreadNullState state;
    IMPL->vertexAttrib1fv(indx, core(values));
}

- (void)vertexAttrib2f:(unsigned)indx x:(float)x y:(float)y
{
    WebCore::JSMainThreadNullState state;
    IMPL->vertexAttrib2f(indx, x, y);
}

- (void)vertexAttrib2fv:(unsigned)indx values:(DOMFloat32Array *)values
{
    WebCore::JSMainThreadNullState state;
    IMPL->vertexAttrib2fv(indx, core(values));
}

- (void)vertexAttrib3f:(unsigned)indx x:(float)x y:(float)y z:(float)z
{
    WebCore::JSMainThreadNullState state;
    IMPL->vertexAttrib3f(indx, x, y, z);
}

- (void)vertexAttrib3fv:(unsigned)indx values:(DOMFloat32Array *)values
{
    WebCore::JSMainThreadNullState state;
    IMPL->vertexAttrib3fv(indx, core(values));
}

- (void)vertexAttrib4f:(unsigned)indx x:(float)x y:(float)y z:(float)z w:(float)w
{
    WebCore::JSMainThreadNullState state;
    IMPL->vertexAttrib4f(indx, x, y, z, w);
}

- (void)vertexAttrib4fv:(unsigned)indx values:(DOMFloat32Array *)values
{
    WebCore::JSMainThreadNullState state;
    IMPL->vertexAttrib4fv(indx, core(values));
}

- (void)vertexAttribPointer:(unsigned)indx size:(int)size type:(unsigned)type normalized:(BOOL)normalized stride:(int)stride offset:(int)offset
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->vertexAttribPointer(indx, size, type, normalized, stride, offset, ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)viewport:(int)x y:(int)y width:(int)width height:(int)height
{
    WebCore::JSMainThreadNullState state;
    IMPL->viewport(x, y, width, height);
}

@end

WebCore::WebGLRenderingContext* core(DOMWebGLRenderingContext *wrapper)
{
    return wrapper ? reinterpret_cast<WebCore::WebGLRenderingContext*>(wrapper->_internal) : 0;
}

DOMWebGLRenderingContext *kit(WebCore::WebGLRenderingContext* value)
{
    { DOM_ASSERT_MAIN_THREAD(); WebCoreThreadViolationCheckRoundOne(); };
    return static_cast<DOMWebGLRenderingContext*>(kit(static_cast<WebCore::Node*>(value)));
}

#endif // ENABLE(WEBGL)
