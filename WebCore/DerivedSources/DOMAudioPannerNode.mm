/*
 * This file is part of the WebKit open source project.
 * This file has been generated by generate-bindings.pl. DO NOT MODIFY!
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE COMPUTER, INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE COMPUTER, INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 */

#import "config.h"

#if ENABLE(WEB_AUDIO)

#import "DOMInternal.h"

#import "DOMAudioPannerNode.h"

#import "AudioGain.h"
#import "AudioPannerNode.h"
#import "DOMAudioGainInternal.h"
#import "DOMAudioPannerNodeInternal.h"
#import "DOMBlobInternal.h"
#import "DOMCSSRuleInternal.h"
#import "DOMCSSValueInternal.h"
#import "DOMEventInternal.h"
#import "DOMNodeInternal.h"
#import "DOMStyleSheetInternal.h"
#import "ExceptionHandlers.h"
#import "JSMainThreadExecState.h"
#import "ThreadCheck.h"
#import "WebScriptObjectPrivate.h"
#import <wtf/GetPtr.h>

#define IMPL static_cast<WebCore::AudioPannerNode*>(reinterpret_cast<WebCore::Node*>(_internal))

@implementation DOMAudioPannerNode

- (unsigned)panningModel
{
    WebCore::JSMainThreadNullState state;
    return IMPL->panningModel();
}

- (void)setPanningModel:(unsigned)newPanningModel
{
    WebCore::JSMainThreadNullState state;
    IMPL->setPanningModel(newPanningModel);
}

- (unsigned)distanceModel
{
    WebCore::JSMainThreadNullState state;
    return IMPL->distanceModel();
}

- (void)setDistanceModel:(unsigned)newDistanceModel
{
    WebCore::JSMainThreadNullState state;
    IMPL->setDistanceModel(newDistanceModel);
}

- (float)refDistance
{
    WebCore::JSMainThreadNullState state;
    return IMPL->refDistance();
}

- (void)setRefDistance:(float)newRefDistance
{
    WebCore::JSMainThreadNullState state;
    IMPL->setRefDistance(newRefDistance);
}

- (float)maxDistance
{
    WebCore::JSMainThreadNullState state;
    return IMPL->maxDistance();
}

- (void)setMaxDistance:(float)newMaxDistance
{
    WebCore::JSMainThreadNullState state;
    IMPL->setMaxDistance(newMaxDistance);
}

- (float)rolloffFactor
{
    WebCore::JSMainThreadNullState state;
    return IMPL->rolloffFactor();
}

- (void)setRolloffFactor:(float)newRolloffFactor
{
    WebCore::JSMainThreadNullState state;
    IMPL->setRolloffFactor(newRolloffFactor);
}

- (float)coneInnerAngle
{
    WebCore::JSMainThreadNullState state;
    return IMPL->coneInnerAngle();
}

- (void)setConeInnerAngle:(float)newConeInnerAngle
{
    WebCore::JSMainThreadNullState state;
    IMPL->setConeInnerAngle(newConeInnerAngle);
}

- (float)coneOuterAngle
{
    WebCore::JSMainThreadNullState state;
    return IMPL->coneOuterAngle();
}

- (void)setConeOuterAngle:(float)newConeOuterAngle
{
    WebCore::JSMainThreadNullState state;
    IMPL->setConeOuterAngle(newConeOuterAngle);
}

- (float)coneOuterGain
{
    WebCore::JSMainThreadNullState state;
    return IMPL->coneOuterGain();
}

- (void)setConeOuterGain:(float)newConeOuterGain
{
    WebCore::JSMainThreadNullState state;
    IMPL->setConeOuterGain(newConeOuterGain);
}

- (DOMAudioGain *)coneGain
{
    WebCore::JSMainThreadNullState state;
    return kit(WTF::getPtr(IMPL->coneGain()));
}

- (DOMAudioGain *)distanceGain
{
    WebCore::JSMainThreadNullState state;
    return kit(WTF::getPtr(IMPL->distanceGain()));
}

- (void)setPosition:(float)x y:(float)y z:(float)z
{
    WebCore::JSMainThreadNullState state;
    IMPL->setPosition(x, y, z);
}

- (void)setOrientation:(float)x y:(float)y z:(float)z
{
    WebCore::JSMainThreadNullState state;
    IMPL->setOrientation(x, y, z);
}

- (void)setVelocity:(float)x y:(float)y z:(float)z
{
    WebCore::JSMainThreadNullState state;
    IMPL->setVelocity(x, y, z);
}

@end

WebCore::AudioPannerNode* core(DOMAudioPannerNode *wrapper)
{
    return wrapper ? reinterpret_cast<WebCore::AudioPannerNode*>(wrapper->_internal) : 0;
}

DOMAudioPannerNode *kit(WebCore::AudioPannerNode* value)
{
    { DOM_ASSERT_MAIN_THREAD(); WebCoreThreadViolationCheckRoundOne(); };
    return static_cast<DOMAudioPannerNode*>(kit(static_cast<WebCore::Node*>(value)));
}

#endif // ENABLE(WEB_AUDIO)
