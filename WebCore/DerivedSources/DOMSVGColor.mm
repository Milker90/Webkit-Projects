/*
 * This file is part of the WebKit open source project.
 * This file has been generated by generate-bindings.pl. DO NOT MODIFY!
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE COMPUTER, INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE COMPUTER, INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 */

#import "config.h"

#if ENABLE(SVG)

#import "DOMInternal.h"

#import "DOMSVGColor.h"

#import "DOMBlobInternal.h"
#import "DOMCSSRuleInternal.h"
#import "DOMCSSValueInternal.h"
#import "DOMEventInternal.h"
#import "DOMNodeInternal.h"
#import "DOMRGBColorInternal.h"
#import "DOMSVGColorInternal.h"
#import "DOMStyleSheetInternal.h"
#import "ExceptionHandlers.h"
#import "JSMainThreadExecState.h"
#import "KURL.h"
#import "RGBColor.h"
#import "SVGColor.h"
#import "ThreadCheck.h"
#import "WebScriptObjectPrivate.h"
#import <wtf/GetPtr.h>

#define IMPL static_cast<WebCore::SVGColor*>(reinterpret_cast<WebCore::CSSValue*>(_internal))

@implementation DOMSVGColor

- (unsigned short)colorType
{
    WebCore::JSMainThreadNullState state;
    return IMPL->colorType();
}

- (DOMRGBColor *)rgbColor
{
    WebCore::JSMainThreadNullState state;
    return kit(WTF::getPtr(IMPL->rgbColor()));
}

- (void)setRGBColor:(NSString *)inRgbColor
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->setRGBColor(inRgbColor, ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)setRGBColorICCColor:(NSString *)inRgbColor iccColor:(NSString *)iccColor
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->setRGBColorICCColor(inRgbColor, iccColor, ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)setColor:(unsigned short)inColorType rgbColor:(NSString *)inRgbColor iccColor:(NSString *)iccColor
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->setColor(inColorType, inRgbColor, iccColor, ec);
    WebCore::raiseOnDOMError(ec);
}

@end

WebCore::SVGColor* core(DOMSVGColor *wrapper)
{
    return wrapper ? reinterpret_cast<WebCore::SVGColor*>(wrapper->_internal) : 0;
}

DOMSVGColor *kit(WebCore::SVGColor* value)
{
    { DOM_ASSERT_MAIN_THREAD(); WebCoreThreadViolationCheckRoundOne(); };
    return static_cast<DOMSVGColor*>(kit(static_cast<WebCore::CSSValue*>(value)));
}

#endif // ENABLE(SVG)
