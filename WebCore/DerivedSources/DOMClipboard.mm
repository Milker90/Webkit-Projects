/*
 * This file is part of the WebKit open source project.
 * This file has been generated by generate-bindings.pl. DO NOT MODIFY!
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE COMPUTER, INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE COMPUTER, INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 */

#import "config.h"
#import "DOMInternal.h"

#import "DOMClipboard.h"

#import "Array.h"
#import "Clipboard.h"
#import "DOMArrayInternal.h"
#import "DOMBlobInternal.h"
#import "DOMCSSRuleInternal.h"
#import "DOMCSSValueInternal.h"
#import "DOMClipboardInternal.h"
#import "DOMDataTransferItemsInternal.h"
#import "DOMEventInternal.h"
#import "DOMFileListInternal.h"
#import "DOMHTMLImageElementInternal.h"
#import "DOMNodeInternal.h"
#import "DOMStyleSheetInternal.h"
#import "DataTransferItems.h"
#import "ExceptionHandlers.h"
#import "FileList.h"
#import "HTMLImageElement.h"
#import "JSMainThreadExecState.h"
#import "KURL.h"
#import "ThreadCheck.h"
#import "WebCoreObjCExtras.h"
#import "WebScriptObjectPrivate.h"
#import <wtf/GetPtr.h>

#define IMPL reinterpret_cast<WebCore::Clipboard*>(_internal)

@implementation DOMClipboard

- (void)dealloc
{
    if (WebCoreObjCScheduleDeallocateOnMainThread([DOMClipboard class], self))
        return;

    if (_internal)
        IMPL->deref();
    [super dealloc];
}

- (void)finalize
{
    if (_internal)
        IMPL->deref();
    [super finalize];
}

- (NSString *)dropEffect
{
    WebCore::JSMainThreadNullState state;
    return IMPL->dropEffect();
}

- (void)setDropEffect:(NSString *)newDropEffect
{
    WebCore::JSMainThreadNullState state;
    IMPL->setDropEffect(newDropEffect);
}

- (NSString *)effectAllowed
{
    WebCore::JSMainThreadNullState state;
    return IMPL->effectAllowed();
}

- (void)setEffectAllowed:(NSString *)newEffectAllowed
{
    WebCore::JSMainThreadNullState state;
    IMPL->setEffectAllowed(newEffectAllowed);
}

- (DOMArray *)types
{
    WebCore::JSMainThreadNullState state;
    return kit(WTF::getPtr(IMPL->types()));
}

- (DOMFileList *)files
{
    WebCore::JSMainThreadNullState state;
    return kit(WTF::getPtr(IMPL->files()));
}

#if ENABLE(DATA_TRANSFER_ITEMS)
- (DOMDataTransferItems *)items
{
    WebCore::JSMainThreadNullState state;
    return kit(WTF::getPtr(IMPL->items()));
}
#endif

- (void)clearData:(NSString *)type
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->clearData(type, ec);
    WebCore::raiseOnDOMError(ec);
}

- (void)getData:(NSString *)type
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->getData(type, ec);
    WebCore::raiseOnDOMError(ec);
}

- (BOOL)setData:(NSString *)type data:(NSString *)data
{
    WebCore::JSMainThreadNullState state;
    return IMPL->setData(type, data);
}

- (void)setDragImage:(DOMHTMLImageElement *)image x:(int)x y:(int)y
{
    WebCore::JSMainThreadNullState state;
    WebCore::ExceptionCode ec = 0;
    IMPL->setDragImage(core(image), x, y, ec);
    WebCore::raiseOnDOMError(ec);
}

@end

WebCore::Clipboard* core(DOMClipboard *wrapper)
{
    return wrapper ? reinterpret_cast<WebCore::Clipboard*>(wrapper->_internal) : 0;
}

DOMClipboard *kit(WebCore::Clipboard* value)
{
    { DOM_ASSERT_MAIN_THREAD(); WebCoreThreadViolationCheckRoundOne(); };
    if (!value)
        return nil;
    if (DOMClipboard *wrapper = getDOMWrapper(value))
        return [[wrapper retain] autorelease];
    DOMClipboard *wrapper = [[DOMClipboard alloc] _init];
    wrapper->_internal = reinterpret_cast<DOMObjectInternal*>(value);
    value->ref();
    addDOMWrapper(wrapper, value);
    return [wrapper autorelease];
}
