/*
 * This file is part of the WebKit open source project.
 * This file has been generated by generate-bindings.pl. DO NOT MODIFY!
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE COMPUTER, INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE COMPUTER, INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 */

#import "config.h"

#if ENABLE(SVG) && ENABLE(FILTERS)

#import "DOMInternal.h"

#import "DOMSVGFEDistantLightElement.h"

#import "DOMBlobInternal.h"
#import "DOMCSSRuleInternal.h"
#import "DOMCSSValueInternal.h"
#import "DOMEventInternal.h"
#import "DOMNodeInternal.h"
#import "DOMSVGAnimatedNumberInternal.h"
#import "DOMSVGFEDistantLightElementInternal.h"
#import "DOMStyleSheetInternal.h"
#import "ExceptionHandlers.h"
#import "JSMainThreadExecState.h"
#import "SVGAnimatedNumber.h"
#import "SVGFEDistantLightElement.h"
#import "ThreadCheck.h"
#import "WebScriptObjectPrivate.h"
#import <wtf/GetPtr.h>

#define IMPL static_cast<WebCore::SVGFEDistantLightElement*>(reinterpret_cast<WebCore::Node*>(_internal))

@implementation DOMSVGFEDistantLightElement

- (DOMSVGAnimatedNumber *)azimuth
{
    WebCore::JSMainThreadNullState state;
    return kit(WTF::getPtr(IMPL->azimuthAnimated()));
}

- (DOMSVGAnimatedNumber *)elevation
{
    WebCore::JSMainThreadNullState state;
    return kit(WTF::getPtr(IMPL->elevationAnimated()));
}

@end

WebCore::SVGFEDistantLightElement* core(DOMSVGFEDistantLightElement *wrapper)
{
    return wrapper ? reinterpret_cast<WebCore::SVGFEDistantLightElement*>(wrapper->_internal) : 0;
}

DOMSVGFEDistantLightElement *kit(WebCore::SVGFEDistantLightElement* value)
{
    { DOM_ASSERT_MAIN_THREAD(); WebCoreThreadViolationCheckRoundOne(); };
    return static_cast<DOMSVGFEDistantLightElement*>(kit(static_cast<WebCore::Node*>(value)));
}

#endif // ENABLE(SVG) && ENABLE(FILTERS)
