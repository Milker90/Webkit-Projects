/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#ifndef JSOscillator_h
#define JSOscillator_h

#if ENABLE(WEB_AUDIO)

#include "JSAudioSourceNode.h"
#include "JSDOMBinding.h"
#include "Oscillator.h"
#include <runtime/JSObject.h>

namespace WebCore {

class JSOscillator : public JSAudioSourceNode {
public:
    typedef JSAudioSourceNode Base;
    static JSOscillator* create(JSC::Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<Oscillator> impl)
    {
        JSOscillator* ptr = new (NotNull, JSC::allocateCell<JSOscillator>(globalObject->globalData().heap)) JSOscillator(structure, globalObject, impl);
        ptr->finishCreation(globalObject->globalData());
        return ptr;
    }

    static JSC::JSObject* createPrototype(JSC::ExecState*, JSC::JSGlobalObject*);
    static bool getOwnPropertySlot(JSC::JSCell*, JSC::ExecState*, JSC::PropertyName, JSC::PropertySlot&);
    static bool getOwnPropertyDescriptor(JSC::JSObject*, JSC::ExecState*, JSC::PropertyName, JSC::PropertyDescriptor&);
    static void put(JSC::JSCell*, JSC::ExecState*, JSC::PropertyName, JSC::JSValue, JSC::PutPropertySlot&);
    static const JSC::ClassInfo s_info;

    static JSC::Structure* createStructure(JSC::JSGlobalData& globalData, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(globalData, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), &s_info);
    }

    static JSC::JSValue getConstructor(JSC::ExecState*, JSC::JSGlobalObject*);
protected:
    JSOscillator(JSC::Structure*, JSDOMGlobalObject*, PassRefPtr<Oscillator>);
    void finishCreation(JSC::JSGlobalData&);
    static const unsigned StructureFlags = JSC::OverridesGetOwnPropertySlot | Base::StructureFlags;
};

JSC::JSValue toJS(JSC::ExecState*, JSDOMGlobalObject*, Oscillator*);

class JSOscillatorPrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSC::JSObject* self(JSC::ExecState*, JSC::JSGlobalObject*);
    static JSOscillatorPrototype* create(JSC::JSGlobalData& globalData, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSOscillatorPrototype* ptr = new (NotNull, JSC::allocateCell<JSOscillatorPrototype>(globalData.heap)) JSOscillatorPrototype(globalData, globalObject, structure);
        ptr->finishCreation(globalData);
        return ptr;
    }

    static const JSC::ClassInfo s_info;
    static bool getOwnPropertySlot(JSC::JSCell*, JSC::ExecState*, JSC::PropertyName, JSC::PropertySlot&);
    static bool getOwnPropertyDescriptor(JSC::JSObject*, JSC::ExecState*, JSC::PropertyName, JSC::PropertyDescriptor&);
    static JSC::Structure* createStructure(JSC::JSGlobalData& globalData, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(globalData, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), &s_info);
    }

private:
    JSOscillatorPrototype(JSC::JSGlobalData& globalData, JSC::JSGlobalObject*, JSC::Structure* structure) : JSC::JSNonFinalObject(globalData, structure) { }
protected:
    static const unsigned StructureFlags = JSC::OverridesGetOwnPropertySlot | Base::StructureFlags;
};

class JSOscillatorConstructor : public DOMConstructorObject {
private:
    JSOscillatorConstructor(JSC::Structure*, JSDOMGlobalObject*);
    void finishCreation(JSC::ExecState*, JSDOMGlobalObject*);

public:
    typedef DOMConstructorObject Base;
    static JSOscillatorConstructor* create(JSC::ExecState* exec, JSC::Structure* structure, JSDOMGlobalObject* globalObject)
    {
        JSOscillatorConstructor* ptr = new (NotNull, JSC::allocateCell<JSOscillatorConstructor>(*exec->heap())) JSOscillatorConstructor(structure, globalObject);
        ptr->finishCreation(exec, globalObject);
        return ptr;
    }

    static bool getOwnPropertySlot(JSC::JSCell*, JSC::ExecState*, JSC::PropertyName, JSC::PropertySlot&);
    static bool getOwnPropertyDescriptor(JSC::JSObject*, JSC::ExecState*, JSC::PropertyName, JSC::PropertyDescriptor&);
    static const JSC::ClassInfo s_info;
    static JSC::Structure* createStructure(JSC::JSGlobalData& globalData, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(globalData, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), &s_info);
    }
protected:
    static const unsigned StructureFlags = JSC::OverridesGetOwnPropertySlot | JSC::ImplementsHasInstance | DOMConstructorObject::StructureFlags;
};

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsOscillatorPrototypeFunctionNoteOn(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsOscillatorPrototypeFunctionNoteOff(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsOscillatorPrototypeFunctionSetWaveTable(JSC::ExecState*);
// Attributes

JSC::JSValue jsOscillatorType(JSC::ExecState*, JSC::JSValue, JSC::PropertyName);
void setJSOscillatorType(JSC::ExecState*, JSC::JSObject*, JSC::JSValue);
JSC::JSValue jsOscillatorPlaybackState(JSC::ExecState*, JSC::JSValue, JSC::PropertyName);
JSC::JSValue jsOscillatorFrequency(JSC::ExecState*, JSC::JSValue, JSC::PropertyName);
JSC::JSValue jsOscillatorDetune(JSC::ExecState*, JSC::JSValue, JSC::PropertyName);
JSC::JSValue jsOscillatorConstructor(JSC::ExecState*, JSC::JSValue, JSC::PropertyName);
// Constants

JSC::JSValue jsOscillatorSINE(JSC::ExecState*, JSC::JSValue, JSC::PropertyName);
JSC::JSValue jsOscillatorSQUARE(JSC::ExecState*, JSC::JSValue, JSC::PropertyName);
JSC::JSValue jsOscillatorSAWTOOTH(JSC::ExecState*, JSC::JSValue, JSC::PropertyName);
JSC::JSValue jsOscillatorTRIANGLE(JSC::ExecState*, JSC::JSValue, JSC::PropertyName);
JSC::JSValue jsOscillatorCUSTOM(JSC::ExecState*, JSC::JSValue, JSC::PropertyName);
JSC::JSValue jsOscillatorUNSCHEDULED_STATE(JSC::ExecState*, JSC::JSValue, JSC::PropertyName);
JSC::JSValue jsOscillatorSCHEDULED_STATE(JSC::ExecState*, JSC::JSValue, JSC::PropertyName);
JSC::JSValue jsOscillatorPLAYING_STATE(JSC::ExecState*, JSC::JSValue, JSC::PropertyName);
JSC::JSValue jsOscillatorFINISHED_STATE(JSC::ExecState*, JSC::JSValue, JSC::PropertyName);

} // namespace WebCore

#endif // ENABLE(WEB_AUDIO)

#endif
